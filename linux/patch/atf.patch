diff --git a/plat/nxp/soc-ls1046a/ls1046apscb/ddr_init.c b/plat/nxp/soc-ls1046a/ls1046apscb/ddr_init.c
new file mode 100644
index 000000000..ba5fd6431
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/ls1046apscb/ddr_init.c
@@ -0,0 +1,311 @@
+/*
+ * Copyright 2018-2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include <assert.h>
+#include <errno.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <common/debug.h>
+#include <ddr.h>
+#include <errata.h>
+#include <lib/utils.h>
+
+#include "plat_common.h"
+#include <platform_def.h>
+
+#ifdef CONFIG_STATIC_DDR
+const struct ddr_cfg_regs static_2100 = {
+	.cs[0].config = 0x80040322,
+	.cs[0].bnds = 0x1FF,
+	.cs[1].config = 0x80000322,
+	.cs[1].bnds = 0x1FF,
+	.sdram_cfg[0] = 0xE5004000,
+	.sdram_cfg[1] = 0x401151,
+	.timing_cfg[0] = 0xD1770018,
+	.timing_cfg[1] = 0xF2FC9245,
+	.timing_cfg[2] = 0x594197,
+	.timing_cfg[3] = 0x2101100,
+	.timing_cfg[4] = 0x220002,
+	.timing_cfg[5] = 0x5401400,
+	.timing_cfg[7] = 0x26600000,
+	.timing_cfg[8] = 0x5446A00,
+	.dq_map[0] = 0x32C57554,
+	.dq_map[1] = 0xD4BB0BD4,
+	.dq_map[2] = 0x2EC2F554,
+	.dq_map[3] = 0xD95D4001,
+	.sdram_mode[0] = 0x3010631,
+	.sdram_mode[1] = 0x100200,
+	.sdram_mode[9] = 0x8400000,
+	.sdram_mode[8] = 0x500,
+	.sdram_mode[2] = 0x10631,
+	.sdram_mode[3] = 0x100200,
+	.sdram_mode[10] = 0x400,
+	.sdram_mode[11] = 0x8400000,
+	.sdram_mode[4] = 0x10631,
+	.sdram_mode[5] = 0x100200,
+	.sdram_mode[12] = 0x400,
+	.sdram_mode[13] = 0x8400000,
+	.sdram_mode[6] = 0x10631,
+	.sdram_mode[7] = 0x100200,
+	.sdram_mode[14] = 0x400,
+	.sdram_mode[15] = 0x8400000,
+	.interval = 0x1FFE07FF,
+	.zq_cntl = 0x8A090705,
+	.clk_cntl = 0x2000000,
+	.cdr[0] = 0x80040000,
+	.cdr[1] = 0xC1,
+	.wrlvl_cntl[0] = 0x86750609,
+	.wrlvl_cntl[1] = 0xA0B0C0D,
+	.wrlvl_cntl[2] = 0xF10110E,
+};
+
+const struct ddr_cfg_regs static_1800 = {
+	.cs[0].config = 0x80040322,
+	.cs[0].bnds = 0x1FF,
+	.cs[1].config = 0x80000322,
+	.cs[1].bnds = 0x1FF,
+	.sdram_cfg[0] = 0xE5004000,
+	.sdram_cfg[1] = 0x401151,
+	.timing_cfg[0] = 0x91660018,
+	.timing_cfg[1] = 0xDDD82045,
+	.timing_cfg[2] = 0x512153,
+	.timing_cfg[3] = 0x10E1100,
+	.timing_cfg[4] = 0x220002,
+	.timing_cfg[5] = 0x4401400,
+	.timing_cfg[7] = 0x14400000,
+	.timing_cfg[8] = 0x3335900,
+	.dq_map[0] = 0x32C57554,
+	.dq_map[1] = 0xD4BB0BD4,
+	.dq_map[2] = 0x2EC2F554,
+	.dq_map[3] = 0xD95D4001,
+	.sdram_mode[0] = 0x3010421,
+	.sdram_mode[1] = 0x80200,
+	.sdram_mode[9] = 0x4400000,
+	.sdram_mode[8] = 0x500,
+	.sdram_mode[2] = 0x10421,
+	.sdram_mode[3] = 0x80200,
+	.sdram_mode[10] = 0x400,
+	.sdram_mode[11] = 0x4400000,
+	.sdram_mode[4] = 0x10421,
+	.sdram_mode[5] = 0x80200,
+	.sdram_mode[12] = 0x400,
+	.sdram_mode[13] = 0x4400000,
+	.sdram_mode[6] = 0x10421,
+	.sdram_mode[7] = 0x80200,
+	.sdram_mode[14] = 0x400,
+	.sdram_mode[15] = 0x4400000,
+	.interval = 0x1B6C06DB,
+	.zq_cntl = 0x8A090705,
+	.clk_cntl = 0x2000000,
+	.cdr[0] = 0x80040000,
+	.cdr[1] = 0xC1,
+	.wrlvl_cntl[0] = 0x86750607,
+	.wrlvl_cntl[1] = 0x8090A0B,
+	.wrlvl_cntl[2] = 0xD0E0F0C,
+};
+
+const struct ddr_cfg_regs static_1600 = {
+	.cs[0].config = 0x80040322,
+	.cs[0].bnds = 0x1FF,
+	.cs[1].config = 0x80000322,
+	.cs[1].bnds = 0x1FF,
+	.sdram_cfg[0] = 0xE5004000,
+	.sdram_cfg[1] = 0x401151,
+	.sdram_cfg[2] = 0x0,
+	.timing_cfg[0] = 0x91550018,
+	.timing_cfg[1] = 0xBAB48E44,
+	.timing_cfg[2] = 0x490111,
+	.timing_cfg[3] = 0x10C1000,
+	.timing_cfg[4] = 0x220002,
+	.timing_cfg[5] = 0x3401400,
+	.timing_cfg[6] = 0x0,
+	.timing_cfg[7] = 0x13300000,
+	.timing_cfg[8] = 0x1224800,
+	.timing_cfg[9] = 0x0,
+	.dq_map[0] = 0x32C57554,
+	.dq_map[1] = 0xD4BB0BD4,
+	.dq_map[2] = 0x2EC2F554,
+	.dq_map[3] = 0xD95D4001,
+	.sdram_mode[0] = 0x3010211,
+	.sdram_mode[1] = 0x0,
+	.sdram_mode[9] = 0x400000,
+	.sdram_mode[8] = 0x500,
+	.sdram_mode[2] = 0x10211,
+	.sdram_mode[3] = 0x0,
+	.sdram_mode[10] = 0x400,
+	.sdram_mode[11] = 0x400000,
+	.sdram_mode[4] = 0x10211,
+	.sdram_mode[5] = 0x0,
+	.sdram_mode[12] = 0x400,
+	.sdram_mode[13] = 0x400000,
+	.sdram_mode[6] = 0x10211,
+	.sdram_mode[7] = 0x0,
+	.sdram_mode[14] = 0x400,
+	.sdram_mode[15] = 0x400000,
+	.interval = 0x18600618,
+	.zq_cntl = 0x8A090705,
+	.ddr_sr_cntr = 0x0,
+	.clk_cntl = 0x2000000,
+	.cdr[0] = 0x80040000,
+	.cdr[1] = 0xC1,
+	.wrlvl_cntl[0] = 0x86750607,
+	.wrlvl_cntl[1] = 0x8090A0B,
+	.wrlvl_cntl[2] = 0xD0E0F0C,
+};
+
+struct static_table {
+	unsigned long rate;
+	const struct ddr_cfg_regs *regs;
+};
+
+const struct static_table table[] = {
+	{1600, &static_1600},
+	{1800, &static_1800},
+	{2100, &static_2100},
+};
+
+long long board_static_ddr(struct ddr_info *priv)
+{
+	const unsigned long clk = priv->clk / 1000000;
+	long long size = 0;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(table); i++) {
+		if (table[i].rate >= clk)
+			break;
+	}
+	if (i < ARRAY_SIZE(table)) {
+		VERBOSE("Found static setting for rate %ld\n", table[i].rate);
+		memcpy(&priv->ddr_reg, table[i].regs,
+		       sizeof(struct ddr_cfg_regs));
+		size = 0x200000000UL;
+	} else {
+		ERROR("Not static settings for rate %ld\n", clk);
+	}
+
+	return size;
+}
+#else
+static const struct rc_timing rcz[] = {
+	{1600, 8, 7},
+	{2100, 8, 7},
+	{}
+};
+
+static const struct board_timing ram[] = {
+	{0x1f, rcz, 0x01010101, 0x01010101},
+};
+
+int ddr_board_options(struct ddr_info *priv)
+{
+	int ret;
+	struct memctl_opt *popts = &priv->opt;
+
+	ret = cal_board_params(priv, ram, ARRAY_SIZE(ram));
+	if (ret)
+		return ret;
+
+	popts->bstopre = 0;
+	popts->half_strength_drive_en = 1;
+	popts->cpo_sample = 0x46;
+	popts->ddr_cdr1 = DDR_CDR1_DHC_EN | DDR_CDR1_ODT(DDR_CDR_ODT_50ohm);
+	popts->ddr_cdr2 = DDR_CDR2_ODT(DDR_CDR_ODT_50ohm) |
+				DDR_CDR2_VREF_TRAIN_EN;
+	popts->output_driver_impedance = 1;
+
+	return 0;
+}
+
+/* DDR model number:  MT40A512M16JY-083E:B */
+struct dimm_params ddr_raw_timing = {
+		.n_ranks = 1,
+		.rank_density = 4294967296u,
+		.capacity = 4294967296u,
+		.primary_sdram_width = 64,
+		.ec_sdram_width = 8,
+		.rdimm = 0,
+		.mirrored_dimm = 0,
+		.n_row_addr = 16,
+		.n_col_addr = 10,
+		.bank_group_bits = 1,
+		.edc_config = 2,
+		.burst_lengths_bitmask = 0x0c,
+		.tckmin_x_ps = 750,
+		.tckmax_ps = 1900,
+		.caslat_x = 0x0001FFE00,
+		.taa_ps = 13500,
+		.trcd_ps = 13500,
+		.trp_ps = 13500,
+		.tras_ps = 33000,
+		.trc_ps = 46500,
+		.twr_ps = 15000,
+		.trfc1_ps = 350000,
+		.trfc2_ps = 260000,
+		.trfc4_ps = 160000,
+		.tfaw_ps = 30000,
+		.trrds_ps = 5300,
+		.trrdl_ps = 6400,
+		.tccdl_ps = 5355,
+		.refresh_rate_ps = 7800000,
+		.dq_mapping[0] = 0x0,
+		.dq_mapping[1] = 0x0,
+		.dq_mapping[2] = 0x0,
+		.dq_mapping[3] = 0x0,
+		.dq_mapping[4] = 0x0,
+		.dq_mapping_ors = 0,
+		.rc = 0x1f,
+};
+
+int ddr_get_ddr_params(struct dimm_params *pdimm,
+							struct ddr_conf *conf)
+{
+	static const char dimm_model[] = "Fixed DDR on board";
+
+	conf->dimm_in_use[0] = 1;
+	memcpy(pdimm, &ddr_raw_timing, sizeof(struct dimm_params));
+	memcpy(pdimm->mpart, dimm_model, sizeof(dimm_model) - 1);
+
+	return 1;
+}
+#endif
+
+long long init_ddr(void)
+{
+	int spd_addr[] = { NXP_SPD_EEPROM0 };
+	struct ddr_info info;
+	struct sysinfo sys;
+	long long dram_size;
+
+	zeromem(&sys, sizeof(sys));
+	if (get_clocks(&sys)) {
+		ERROR("System clocks are not set\n");
+		assert(0);
+	}
+	debug("platform clock %lu\n", sys.freq_platform);
+	debug("DDR PLL1 %lu\n", sys.freq_ddr_pll0);
+	debug("DDR PLL2 %lu\n", sys.freq_ddr_pll1);
+
+	zeromem(&info, sizeof(struct ddr_info));
+	info.num_ctlrs = 1;
+	info.dimm_on_ctlr = 1;
+	info.clk = get_ddr_freq(&sys, 0);
+	info.spd_addr = spd_addr;
+	info.ddr[0] = (void *)NXP_DDR_ADDR;
+
+	dram_size = dram_init(&info);
+
+	if (dram_size < 0)
+		ERROR("DDR init failed.\n");
+
+	erratum_a008850_post();
+
+	return dram_size;
+}
diff --git a/plat/nxp/soc-ls1046a/ls1046apscb/plat_def.h b/plat/nxp/soc-ls1046a/ls1046apscb/plat_def.h
new file mode 100644
index 000000000..72220ca92
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/ls1046apscb/plat_def.h
@@ -0,0 +1,80 @@
+/*
+ * Copyright 2018-2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#ifndef PLAT_DEF_H
+#define PLAT_DEF_H
+
+#include <arch.h>
+#include <cortex_a72.h>
+#include <policy.h>
+#include <soc.h>
+/* Required without TBBR.
+ * To include the defines for DDR PHY
+ * Images.
+ */
+#include <tbbr_img_def.h>
+
+#define NXP_SPD_EEPROM0		0x51
+
+#define NXP_SYSCLK_FREQ		100000000
+#define NXP_DDRCLK_FREQ		100000000
+
+/* UART related definition */
+#define NXP_CONSOLE_ADDR	NXP_UART_ADDR
+#define NXP_CONSOLE_BAUDRATE	115200
+
+/* Size of cacheable stacks */
+#if defined(IMAGE_BL2)
+#if defined(TRUSTED_BOARD_BOOT)
+#define PLATFORM_STACK_SIZE	0x2000
+#else
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+#elif defined(IMAGE_BL31)
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+
+/* SD block buffer */
+#define NXP_SD_BLOCK_BUF_SIZE	(0x00100000)
+#define NXP_SD_BLOCK_BUF_ADDR	ULL(0x80000000)
+
+#define BL2_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE)
+
+/* IO defines as needed by IO driver framework */
+#define MAX_IO_DEVICES		3
+#define MAX_IO_BLOCK_DEVICES	1
+#define MAX_IO_HANDLES		4
+
+/*
+ * FIP image defines - Offset at which FIP Image would be present
+ * Image would include Bl31 , Bl33 and Bl32 (optional)
+ */
+#ifdef POLICY_FUSE_PROVISION
+#define MAX_FIP_DEVICES		2
+#endif
+
+#ifndef MAX_FIP_DEVICES
+#define MAX_FIP_DEVICES		1
+#endif
+
+/*
+ * ID of the secure physical generic timer interrupt used by the BL32.
+ */
+#define BL32_IRQ_SEC_PHY_TIMER	29
+
+/*
+ * Define properties of Group 1 Secure and Group 0 interrupts as per GICv3
+ * terminology. On a GICv2 system or mode, the lists will be merged and treated
+ * as Group 0 interrupts.
+ */
+#define PLAT_LS_G1S_IRQ_PROPS(grp) \
+	INTR_PROP_DESC(BL32_IRQ_SEC_PHY_TIMER, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_LEVEL)
+
+#define PLAT_LS_G0_IRQ_PROPS(grp)
+
+#endif
diff --git a/plat/nxp/soc-ls1046a/ls1046apscb/platform.c b/plat/nxp/soc-ls1046a/ls1046apscb/platform.c
new file mode 100644
index 000000000..3186cc9a1
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/ls1046apscb/platform.c
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include <plat_common.h>
+
+#pragma weak board_enable_povdd
+#pragma weak board_disable_povdd
+
+bool board_enable_povdd(void)
+{
+#ifdef CONFIG_POVDD_ENABLE
+	return true;
+#else
+	return false;
+#endif
+}
+
+bool board_disable_povdd(void)
+{
+#ifdef CONFIG_POVDD_ENABLE
+	return true;
+#else
+	return false;
+#endif
+}
+
diff --git a/plat/nxp/soc-ls1046a/ls1046apscb/platform.mk b/plat/nxp/soc-ls1046a/ls1046apscb/platform.mk
new file mode 100644
index 000000000..0e623a07f
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/ls1046apscb/platform.mk
@@ -0,0 +1,40 @@
+#
+# Copyright 2018-2020 NXP
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+
+# board-specific build parameters
+
+BOOT_MODE	?=	qspi
+BOARD		:=	ls1046apscb
+POVDD_ENABLE	:=	no
+
+ # DDR Compilation Configs
+CONFIG_DDR_NODIMM := 1
+NUM_OF_DDRC	:=	1
+DDRC_NUM_DIMM	:=	0
+DDRC_NUM_CS	:=	1
+DDR_ECC_EN	:=	yes
+CONFIG_STATIC_DDR := 0
+
+ # On-Board Flash Details
+QSPI_FLASH_SZ	:=	0x20000000
+NOR_FLASH_SZ	:=	0x20000000
+
+ # Platform specific features.
+WARM_BOOT	:=	no
+
+ # Adding Platform files build files
+BL2_SOURCES	+=	${BOARD_PATH}/ddr_init.c\
+			${BOARD_PATH}/platform.c
+
+SUPPORTED_BOOT_MODE	:=	qspi	\
+				sd	\
+				emmc
+
+# Adding platform board build info
+include plat/nxp/common/plat_common_def.mk
+
+ # Adding SoC build info
+include plat/nxp/soc-ls1046a/soc.mk
diff --git a/plat/nxp/soc-ls1046a/ls1046apscb/platform_def.h b/plat/nxp/soc-ls1046a/ls1046apscb/platform_def.h
new file mode 100644
index 000000000..11595644d
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/ls1046apscb/platform_def.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright 2018-2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#ifndef PLATFORM_DEF_H
+#define PLATFORM_DEF_H
+
+#include <plat_def.h>
+#include <plat_default_def.h>
+
+#endif /* PLATFORM_DEF_H */
diff --git a/plat/nxp/soc-ls1046a/ls1046apscb/policy.h b/plat/nxp/soc-ls1046a/ls1046apscb/policy.h
new file mode 100644
index 000000000..7daa15007
--- /dev/null
+++ b/plat/nxp/soc-ls1046a/ls1046apscb/policy.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2018-2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#ifndef _POLICY_H
+#define	_POLICY_H
+
+/* Following defines affect the PLATFORM SECURITY POLICY */
+
+/* set this to 0x0 if the platform is not using/responding to ECC errors
+ * set this to 0x1 if ECC is being used (we have to do some init)
+ */
+#define  POLICY_USING_ECC 0x0
+
+/* Set this to 0x0 to leave the default SMMU page size in sACR
+ * Set this to 0x1 to change the SMMU page size to 64K
+ */
+#define POLICY_SMMU_PAGESZ_64K 0x1
+
+
+/*
+ * set this to '1' if the debug clocks need to remain enabled during
+ * system entry to low-power (LPM20) - this should only be necessary
+ * for testing and NEVER set for normal production
+ */
+#define POLICY_DEBUG_ENABLE 0
+
+
+#endif /* _POLICY_H */
